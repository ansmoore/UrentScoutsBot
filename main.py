import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, ApplicationBuilder, \
    ContextTypes
from datetime import datetime, timedelta
import pytz

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

SCOUTS = {}
USER_NAMES = {}
USER_STATES = {}
SHIFT_START_TIMES = {}
MIN_WORKING_HOURS = {}
OWNER_ID = None

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

EXCLUDED_MESSAGES = [
    "‚ùå –í—ã –Ω–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. ‚ùå",
    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ.",
    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤. ‚ùå",
    "‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. ‚ùå",
    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É."
]


async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id in SCOUTS or user_id == OWNER_ID:
        user_state = USER_STATES.get(user_id, 'idle')
        keyboard = []
        if user_state == 'idle':
            keyboard.append([InlineKeyboardButton("üîã –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", callback_data='start_shift')])
        elif user_state == 'on_shift':
            keyboard.append([InlineKeyboardButton("ü™´ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É", callback_data='end_shift')])
            if user_id in SCOUTS:
                if context.user_data.get('on_break', False):
                    keyboard.append([InlineKeyboardButton("‚òï –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data='end_break')])
                else:
                    keyboard.append([InlineKeyboardButton("‚òï –í–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data='take_break')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")


async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in SCOUTS and user_id != OWNER_ID:
        await query.edit_message_text(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")
        return

    user_full_name = USER_NAMES.get(user_id, 'User')
    role = '–°–∫–∞—É—Ç' if user_id in SCOUTS else '–°—Ç–∞—Ä—à–∏–π –°–∫–∞—É—Ç'
    now = datetime.now(MOSCOW_TZ)

    if query.data == 'start_shift':
        context.user_data['total_break_time'] = 0
        USER_STATES[user_id] = 'on_shift'
        SHIFT_START_TIMES[user_id] = now
        message = f"üõ¥ {role} {user_full_name}. \n–°–º–µ–Ω–∞ #1 —Ä–∞–±–æ—Ç—É –Ω–∞—á–∞–ª."
    elif query.data == 'end_shift':
        shift_duration = now - SHIFT_START_TIMES.get(user_id, now)
        required_shift_duration = timedelta(
            hours=MIN_WORKING_HOURS.get(user_id, 12))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 12 —á–∞—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

        if shift_duration >= required_shift_duration:
            USER_STATES[user_id] = 'idle'
            context.user_data['on_break'] = False
            context.user_data.pop('break_start_time', None)
            context.user_data.pop('total_break_time', None)
            message = f"üõ¥ {role} {user_full_name}. \n–°–º–µ–Ω–∞ #1 —Ä–∞–±–æ—Ç—É –∑–∞–∫–æ–Ω—á–∏–ª."
        else:
            await query.edit_message_text(
                text=f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏. \n‚úâÔ∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ä—à–µ–º—É —Å–∫–∞—É—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç {user_full_name}. \n‚è≥ –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è: {shift_duration}. \n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'approve_end_shift_{user_id}'),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'deny_end_shift_{user_id}')
                    ]
                ])
            )
            return
    elif query.data == 'take_break':
        if user_id in SCOUTS:
            if context.user_data.get('on_break', False):
                await query.edit_message_text("‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. ‚ùå")
            else:
                total_break_time = context.user_data.get('total_break_time', 0)
                if total_break_time < SCOUTS[user_id]:
                    context.user_data['break_start_time'] = now
                    context.user_data['on_break'] = True
                    message = f"‚òïÔ∏è –°–∫–∞—É—Ç {user_full_name} –≤–∑—è–ª –ø–µ—Ä–µ—Ä—ã–≤."

                    context.job_queue.run_repeating(check_break_time, interval=10, first=60,
                                                    data={'user_id': user_id, 'user_full_name': user_full_name,
                                                          'start_time': now}, name=f'check_break_time_{user_id}')
                else:
                    await query.edit_message_text(
                        "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤, —Ç–∞–∫ –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞.")
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤. ‚ùå")
    elif query.data == 'end_break':
        if user_id in SCOUTS and context.user_data.get('on_break', False):
            start_time = context.user_data.get('break_start_time', now)
            time_on_break = (now - start_time).total_seconds() / 60
            total_break_time = context.user_data.get('total_break_time', 0) + time_on_break
            if total_break_time <= SCOUTS[user_id]:
                context.user_data['on_break'] = False
                context.user_data['total_break_time'] = total_break_time
                remaining_time = SCOUTS[user_id] - total_break_time
                message = f"‚òïÔ∏è –°–∫–∞—É—Ç {user_full_name} –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª. \n‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ: {int(time_on_break)} –º–∏–Ω—É—Ç. \n‚åõÔ∏è –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤: {int(remaining_time)} –º–∏–Ω—É—Ç."

                jobs = context.job_queue.get_jobs_by_name(f'check_break_time_{user_id}')
                for job in jobs:
                    job.schedule_removal()
            else:
                context.user_data['on_break'] = False
                context.user_data['total_break_time'] = SCOUTS[user_id]
                message = f"‚òïÔ∏è –°–∫–∞—É—Ç {user_full_name} –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª. \n‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ: {int(SCOUTS[user_id] - (total_break_time - time_on_break))} –º–∏–Ω—É—Ç. \n‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ —Å–º–µ–Ω—É."

                jobs = context.job_queue.get_jobs_by_name(f'check_break_time_{user_id}')
                for job in jobs:
                    job.schedule_removal()
        else:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ. ‚ùå")
    elif query.data.startswith('approve_end_shift_'):
        approved_user_id = int(query.data.split('_')[-1])
        if approved_user_id in USER_STATES and USER_STATES[approved_user_id] == 'on_shift':
            USER_STATES[approved_user_id] = 'idle'
            context.user_data['on_break'] = False
            context.user_data.pop('break_start_time', None)
            context.user_data.pop('total_break_time', None)
            message = f"üõ¥ –°–∫–∞—É—Ç {USER_NAMES[approved_user_id]}. \n–°–º–µ–Ω–∞ #1 —Ä–∞–±–æ—Ç—É –∑–∞–∫–æ–Ω—á–∏–ª –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å—Ç–∞—Ä—à–µ–≥–æ —Å–∫–∞—É—Ç–∞."
            await context.bot.send_message(chat_id=approved_user_id, text=message)
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞ —Å–º–µ–Ω–µ."
    elif query.data.startswith('deny_end_shift_'):
        denied_user_id = int(query.data.split('_')[-1])
        message = f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã –æ—Ç {USER_NAMES[denied_user_id]} –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å—Ç–∞—Ä—à–∏–º —Å–∫–∞—É—Ç–æ–º."
        await context.bot.send_message(chat_id=denied_user_id, text=message)

    await query.edit_message_text(text=message)

    await send_options(update, context)
    if message not in EXCLUDED_MESSAGES:
        await context.bot.send_message(chat_id='id –±–µ—Å–µ–¥—ã —Å –º–∏–Ω—É—Å–æ–º', text=message)
    await context.bot.send_message(chat_id=OWNER_ID, text=message)


async def check_break_time(context: CallbackContext) -> None:
    job = context.job
    user_id = job.data['user_id']
    user_full_name = job.data['user_full_name']
    start_time = job.data['start_time']
    now = datetime.now(MOSCOW_TZ)
    time_on_break = (now - start_time).total_seconds() / 60
    total_break_time = context.user_data.get('total_break_time', 0) + time_on_break

    if total_break_time >= SCOUTS[user_id]:
        context.user_data['on_break'] = False
        job.schedule_removal()

        message = f"‚òïÔ∏è –°–∫–∞—É—Ç {user_full_name} –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª. \n‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ: {int(total_break_time)} –º–∏–Ω—É—Ç. \n‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ —Å–º–µ–Ω—É."
        context.user_data['total_break_time'] = SCOUTS[user_id]
        await context.bot.send_message(chat_id=user_id, text=message)


async def send_options(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    user_state = USER_STATES.get(user_id, 'idle')
    keyboard = []
    if user_state == 'idle':
        keyboard.append([InlineKeyboardButton("üîã –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", callback_data='start_shift')])
    elif user_state == 'on_shift':
        keyboard.append([InlineKeyboardButton("ü™´ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–º–µ–Ω—É", callback_data='end_shift')])
        if user_id in SCOUTS:
            if context.user_data.get('on_break', False):
                keyboard.append([InlineKeyboardButton("‚òï –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data='end_break')])
            else:
                keyboard.append([InlineKeyboardButton("‚òï –í–∑—è—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data='take_break')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.callback_query.message.chat_id, text='‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                   reply_markup=reply_markup)


async def error(update: Update, context: CallbackContext) -> None:
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def main() -> None:
    application = ApplicationBuilder().token("BOT API KEY").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    application.add_error_handler(error)

    application.run_polling()


if __name__ == '__main__':
    SCOUTS['id —Å–∫–∞—É—Ç–∞'] = 60 # 60 –º–∏–Ω—É—Ç –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤
    USER_NAMES['id —Å–∫–∞—É—Ç–∞'] = '–ò–º—è (@—Ç–µ–≥)'
    MIN_WORKING_HOURS['id —Å–∫–∞—É—Ç–∞'] = 12  # –ú–∏–Ω–∏–º—É–º 12 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã

    OWNER_ID = {'id –≤–ª–∞–¥–µ–ª—å—Ü–∞'}
    USER_NAMES['id –≤–ª–∞–¥–µ–ª—å—Ü–∞'] = '–ò–º—è (@—Ç–µ–≥)'

    main()
